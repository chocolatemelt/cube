{"version":3,"sources":["scrollOffset.js","mtg-card-viewer/components/CardImageBox.js","mtg-card-viewer/components/CardName.js","mtg-card-viewer/MtgCardViewer.js","renderers.js","Main.js","serviceWorker.js","index.js","Main.md"],"names":["document","history","location","HISTORY_SUPPORT","pushState","anchorScrolls","ANCHOR_REGEX","OFFSET_HEIGHT_PX","parseFloat","getComputedStyle","querySelector","fontSize","init","this","scrollToCurrent","window","addEventListener","bind","body","delegateAnchors","getFixedOffset","scrollIfAnchor","href","pushToHistory","match","rect","anchorOffset","test","getElementById","slice","getBoundingClientRect","pageYOffset","top","scrollTo","pageXOffset","title","pathname","hash","e","elem","target","nodeName","getAttribute","preventDefault","CardImageBox","props","display","mobileMode","imageUri","imageWidth","cardName","mouseClickHandler","defaultStyling","width","className","classnames","mobile","src","alt","style","onClick","id","arrowColor","place","wrapper","CardName","cardText","onClickHandler","uri","data-tip","data-for","MtgCardViewer","st","searchTerm","split","state","searchSet","isHovered","cardFound","setWrapperRef","mouseOverHandler","mouseLeaveHandler","onClickOutsideHandler","axios","get","buildUrl","then","res","data","total_cards","object","image_uris","normal","setState","name","scryfall_uri","catch","err","removeEventListener","node","wrapperRef","event","contains","stopPropagation","cardSet","set","scryfallSearch","text","ref","React","Component","AnchorHeading","children","slug","useState","setHovered","onMouseEnter","onMouseLeave","aria-hidden","viewBox","version","height","fillRule","d","renderers","heading","level","slugify","value","createElement","image","isMobile","Main","markdown","setMarkdown","useEffect","fetch","mainMd","source","Boolean","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.aeb3ef2b.chunk.js","sourcesContent":["// adjusted from this answer: https://stackoverflow.com/a/13067009\n(function (document, history, location) {\n  const HISTORY_SUPPORT = !!(history && history.pushState);\n\n  const anchorScrolls = {\n    ANCHOR_REGEX: /^#[^ ]+$/,\n    OFFSET_HEIGHT_PX: parseFloat(\n      getComputedStyle(document.querySelector(\"body\")).fontSize\n    ),\n\n    /**\n     * Establish events, and fix initial scroll position if a hash is provided.\n     */\n    init: function () {\n      this.scrollToCurrent();\n      window.addEventListener(\"hashchange\", this.scrollToCurrent.bind(this));\n      document.body.addEventListener(\"click\", this.delegateAnchors.bind(this));\n    },\n\n    /**\n     * Return the offset amount to deduct from the normal scroll position.\n     * Modify as appropriate to allow for dynamic calculations\n     */\n    getFixedOffset: function () {\n      return this.OFFSET_HEIGHT_PX;\n    },\n\n    /**\n     * If the provided href is an anchor which resolves to an element on the\n     * page, scroll to it.\n     * @param  {String} href\n     * @return {Boolean} - Was the href an anchor.\n     */\n    scrollIfAnchor: function (href, pushToHistory) {\n      let match, rect, anchorOffset;\n\n      if (!this.ANCHOR_REGEX.test(href)) {\n        return false;\n      }\n\n      match = document.getElementById(href.slice(1));\n\n      if (match) {\n        rect = match.getBoundingClientRect();\n        anchorOffset = window.pageYOffset + rect.top - this.getFixedOffset();\n        window.scrollTo(window.pageXOffset, anchorOffset);\n\n        // Add the state to history as-per normal anchor links\n        if (HISTORY_SUPPORT && pushToHistory) {\n          history.pushState({}, document.title, location.pathname + href);\n        }\n      }\n\n      return !!match;\n    },\n\n    /**\n     * Attempt to scroll to the current location's hash.\n     */\n    scrollToCurrent: function () {\n      this.scrollIfAnchor(window.location.hash);\n    },\n\n    /**\n     * If the click event's target was an anchor, fix the scroll position.\n     */\n    delegateAnchors: function (e) {\n      const elem = e.target;\n\n      if (\n        elem.nodeName === \"A\" &&\n        this.scrollIfAnchor(elem.getAttribute(\"href\"), true)\n      ) {\n        e.preventDefault();\n      }\n    },\n  };\n\n  window.addEventListener(\n    \"DOMContentLoaded\",\n    anchorScrolls.init.bind(anchorScrolls)\n  );\n})(window.document, window.history, window.location);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport ReactTooltip from \"react-tooltip\";\n\nconst CardImageBox = (props) => {\n  const {\n    display,\n    mobileMode,\n    imageUri,\n    imageWidth,\n    cardName,\n    mouseClickHandler,\n  } = props;\n\n  let defaultStyling = { width: imageWidth };\n\n  return mobileMode ? (\n    <>\n      {display && (\n        <img\n          className={classnames(\"mtgCardViewerBox\", { mobile: mobileMode })}\n          src={imageUri}\n          alt={cardName}\n          style={defaultStyling}\n          onClick={mouseClickHandler}\n        ></img>\n      )}\n    </>\n  ) : (\n    <ReactTooltip\n      className=\"mtg-tooltip\"\n      id={cardName}\n      arrowColor=\"transparent\"\n      place=\"bottom\"\n      wrapper=\"span\"\n    >\n      <img\n        src={imageUri}\n        alt={cardName}\n        style={defaultStyling}\n        onClick={mouseClickHandler}\n      ></img>\n    </ReactTooltip>\n  );\n};\n\nCardImageBox.propTypes = {\n  cardName: PropTypes.string,\n  imageUri: PropTypes.string,\n  style: PropTypes.object,\n  imageWidth: PropTypes.string,\n  mobileMode: PropTypes.bool,\n  mouseClickHandler: PropTypes.func,\n};\n\nexport default CardImageBox;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst CardName = (props) => {\n  const { cardName, cardText, mobileMode, onClickHandler, uri } = props;\n\n  return mobileMode ? (\n    <a href={uri} onClick={onClickHandler}>\n      {cardText ? cardText : cardName}\n    </a>\n  ) : (\n    <a href={uri} data-tip data-for={cardName}>\n      {cardText ? cardText : cardName}\n    </a>\n  );\n};\n\nCardName.propTypes = {\n  uri: PropTypes.string.isRequired,\n  cardName: PropTypes.string.isRequired,\n  cardText: PropTypes.string,\n  mobileMode: PropTypes.bool.isRequired,\n  onClickHandler: PropTypes.func,\n};\n\nexport default CardName;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport classnames from \"classnames\";\n\nimport \"./MtgCardViewer.css\";\n\nimport CardImageBox from \"./components/CardImageBox\";\nimport CardName from \"./components/CardName\";\n\nexport class MtgCardViewer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const st = props.searchTerm.split(\"|\");\n\n    this.state = {\n      searchTerm: st[0],\n      searchSet: st[1],\n      cardName: \"\",\n      imageUri: \"#\",\n      uri: \"#\",\n      isHovered: false,\n      cardFound: false,\n      imageWidth: props.imageWidth ? props.imageWidth : \"280px\",\n    };\n\n    this.setWrapperRef = this.setWrapperRef.bind(this);\n    this.mouseOverHandler = this.mouseOverHandler.bind(this);\n    this.mouseLeaveHandler = this.mouseLeaveHandler.bind(this);\n    this.mouseClickHandler = this.mouseClickHandler.bind(this);\n    this.onClickHandler = this.onClickHandler.bind(this);\n    this.onClickOutsideHandler = this.onClickOutsideHandler.bind(this);\n  }\n\n  componentDidMount() {\n    const { searchTerm, searchSet } = this.state;\n    document.addEventListener(\"mousedown\", this.onClickOutsideHandler);\n\n    axios\n      .get(this.buildUrl(searchTerm, searchSet))\n      .then((res) => {\n        let data = res.data;\n        let amount = data.total_cards;\n\n        if (amount) {\n          let object = data.data[0];\n          let imageUri = object.image_uris.normal;\n\n          this.setState({\n            cardName: object.name,\n            imageUri: imageUri,\n            uri: object.scryfall_uri,\n            cardFound: true,\n          });\n        }\n      })\n      .catch((err) => {\n        this.setState({\n          cardName: \"[card not found]\",\n        });\n      });\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.onClickOutsideHandler);\n  }\n\n  setWrapperRef(node) {\n    this.wrapperRef = node;\n  }\n\n  onClickOutsideHandler(event) {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      this.setState({\n        isHovered: false,\n      });\n    }\n  }\n\n  onClickHandler(e) {\n    e.preventDefault();\n\n    this.setState({\n      isHovered: true,\n    });\n  }\n\n  mouseOverHandler() {\n    this.setState({\n      isHovered: true,\n    });\n  }\n\n  mouseLeaveHandler() {\n    this.setState({\n      isHovered: false,\n    });\n  }\n\n  mouseClickHandler(e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    this.setState({\n      isHovered: false,\n    });\n  }\n\n  buildUrl(cardName, cardSet) {\n    const set = cardSet ? `set:${cardSet}` : \"\";\n    return `${this.scryfallSearch}!\"${cardName}\"${set}`;\n  }\n\n  get scryfallSearch() {\n    return \"https://api.scryfall.com/cards/search?q=\";\n  }\n\n  render() {\n    const { mobileMode, text } = this.props;\n    const {\n      cardName,\n      imageUri,\n      uri,\n      isHovered,\n      cardFound,\n      imageWidth,\n    } = this.state;\n\n    return (\n      <>\n        <ins\n          className={classnames(\"mtgCardViewer\", {\n            mobile: mobileMode,\n          })}\n          ref={this.setWrapperRef}\n        >\n          <CardName\n            mobileMode={mobileMode}\n            uri={uri}\n            cardName={cardName}\n            cardText={text}\n            onClickHandler={this.onClickHandler}\n          />\n          {cardFound && (\n            <CardImageBox\n              imageUri={imageUri}\n              cardName={cardName}\n              imageWidth={imageWidth}\n              display={isHovered}\n              mobileMode={mobileMode}\n              mouseClickHandler={this.mouseClickHandler}\n            />\n          )}\n        </ins>\n      </>\n    );\n  }\n}\n\nMtgCardViewer.propTypes = {\n  searchTerm: PropTypes.string.isRequired,\n  text: PropTypes.string,\n  mobileMode: PropTypes.bool,\n  imageWidth: PropTypes.string,\n};\n","import React, { createElement, useState } from \"react\";\nimport slugify from \"slugify\";\nimport { isMobile } from \"react-device-detect\";\n\nimport { MtgCardViewer } from \"./mtg-card-viewer/MtgCardViewer\";\n\nconst AnchorHeading = (props) => {\n  const { children, slug } = props;\n  const [isHovered, setHovered] = useState(false);\n\n  return (\n    <div\n      className=\"heading\"\n      onMouseEnter={() => {\n        setHovered(true);\n      }}\n      onMouseLeave={() => {\n        setHovered(false);\n      }}\n    >\n      {isHovered && (\n        <a className=\"anchor\" aria-hidden=\"true\" href={`#${slug}`}>\n          <svg\n            className=\"anchor-link\"\n            viewBox=\"0 0 16 16\"\n            version=\"1.1\"\n            width=\"24\"\n            height=\"24\"\n            aria-hidden=\"true\"\n          >\n            <path\n              fillRule=\"evenodd\"\n              d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"\n            ></path>\n          </svg>\n        </a>\n      )}\n      {children}\n      {isHovered && (\n        <a className=\"top\" href=\"#index\">\n          top\n        </a>\n      )}\n    </div>\n  );\n};\n\nconst renderers = {\n  heading: ({ level, children }) => {\n    const slug = slugify(children[0].props.value);\n    const heading = createElement(\n      `h${level}`,\n      {\n        id: slug,\n      },\n      children\n    );\n    return level === 1 ? (\n      <div className=\"title\">{heading}</div>\n    ) : (\n      <AnchorHeading slug={slug}>{heading}</AnchorHeading>\n    );\n  },\n  image: ({ alt, title, src }) => {\n    if (src === \".\") {\n      return (\n        <MtgCardViewer searchTerm={alt} text={title} mobileMode={isMobile} />\n      );\n    }\n    return <img alt={alt} title={title} src={src} />;\n  },\n};\n\nexport default renderers;\n","import React, { useEffect, useState } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport { isMobile } from \"react-device-detect\";\n\nimport renderers from \"./renderers\";\n\nimport \"./Main.css\";\nimport mainMd from \"./Main.md\";\n\nconst Main = () => {\n  const [markdown, setMarkdown] = useState(\"\");\n\n  useEffect(() => {\n    fetch(mainMd)\n      .then((res) => res.text())\n      .then((text) => setMarkdown(text));\n  });\n\n  return (\n    <div className=\"cube\">\n      <ReactMarkdown source={markdown} renderers={renderers} />\n      {isMobile && (\n        <a className=\"top fixed\" href=\"#index\">\n          top\n        </a>\n      )}\n    </div>\n  );\n};\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./Main\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./scrollOffset\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Main.647703e2.md\";"],"sourceRoot":""}